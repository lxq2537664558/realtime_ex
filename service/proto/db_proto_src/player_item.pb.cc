// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player_item.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "player_item.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace db {
class player_item_dataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<player_item_data> {
} _player_item_data_default_instance_;
class player_item_data_wrapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<player_item_data_wrap> {
} _player_item_data_wrap_default_instance_;
class player_itemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<player_item> {
} _player_item_default_instance_;
class player_item_setDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<player_item_set> {
} _player_item_set_default_instance_;

namespace protobuf_player_5fitem_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item_data, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item_data, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item_data, count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item_data_wrap, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item_data_wrap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item_data_wrap, data_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item, player_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item, data_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item_set, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item_set, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(player_item_set, item_set_),
  ~0u,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 7, sizeof(player_item_data)},
  { 9, 15, sizeof(player_item_data_wrap)},
  { 16, 23, sizeof(player_item)},
  { 25, 31, sizeof(player_item_set)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_player_item_data_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_player_item_data_wrap_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_player_item_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_player_item_set_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "player_item.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _player_item_data_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _player_item_data_wrap_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _player_item_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _player_item_set_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_db_5foption_2eproto::InitDefaults();
  _player_item_data_default_instance_.DefaultConstruct();
  _player_item_data_wrap_default_instance_.DefaultConstruct();
  _player_item_default_instance_.DefaultConstruct();
  _player_item_set_default_instance_.DefaultConstruct();
  _player_item_default_instance_.get_mutable()->data_ = const_cast< ::proto::db::player_item_data_wrap*>(
      ::proto::db::player_item_data_wrap::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021player_item.proto\022\010proto.db\032\017db_option"
      ".proto\"-\n\020player_item_data\022\n\n\002id\030\001 \002(\r\022\r"
      "\n\005count\030\002 \002(\r\"A\n\025player_item_data_wrap\022("
      "\n\004data\030\001 \003(\0132\032.proto.db.player_item_data"
      "\"d\n\013player_item\022\021\n\tplayer_id\030\001 \002(\004\0223\n\004da"
      "ta\030\002 \001(\0132\037.proto.db.player_item_data_wra"
      "pB\004\210\265\030\001:\r\202\265\030\tplayer_id\":\n\017player_item_se"
      "t\022\'\n\010item_set\030\001 \003(\0132\025.proto.db.player_it"
      "em"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 322);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "player_item.proto", &protobuf_RegisterTypes);
  ::protobuf_db_5foption_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_player_5fitem_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int player_item_data::kIdFieldNumber;
const int player_item_data::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

player_item_data::player_item_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_player_5fitem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.db.player_item_data)
}
player_item_data::player_item_data(const player_item_data& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:proto.db.player_item_data)
}

void player_item_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&id_) + sizeof(count_));
}

player_item_data::~player_item_data() {
  // @@protoc_insertion_point(destructor:proto.db.player_item_data)
  SharedDtor();
}

void player_item_data::SharedDtor() {
}

void player_item_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_item_data::descriptor() {
  protobuf_player_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_5fitem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const player_item_data& player_item_data::default_instance() {
  protobuf_player_5fitem_2eproto::InitDefaults();
  return *internal_default_instance();
}

player_item_data* player_item_data::New(::google::protobuf::Arena* arena) const {
  player_item_data* n = new player_item_data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void player_item_data::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.db.player_item_data)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&id_) + sizeof(count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool player_item_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.db.player_item_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.db.player_item_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.db.player_item_data)
  return false;
#undef DO_
}

void player_item_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.db.player_item_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.db.player_item_data)
}

::google::protobuf::uint8* player_item_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.db.player_item_data)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.db.player_item_data)
  return target;
}

size_t player_item_data::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.db.player_item_data)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_count()) {
    // required uint32 count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  return total_size;
}
size_t player_item_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.db.player_item_data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 count = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_item_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.db.player_item_data)
  GOOGLE_DCHECK_NE(&from, this);
  const player_item_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const player_item_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.db.player_item_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.db.player_item_data)
    MergeFrom(*source);
  }
}

void player_item_data::MergeFrom(const player_item_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.db.player_item_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      count_ = from.count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void player_item_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.db.player_item_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_item_data::CopyFrom(const player_item_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.db.player_item_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_item_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void player_item_data::Swap(player_item_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void player_item_data::InternalSwap(player_item_data* other) {
  std::swap(id_, other->id_);
  std::swap(count_, other->count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata player_item_data::GetMetadata() const {
  protobuf_player_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_5fitem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// player_item_data

// required uint32 id = 1;
bool player_item_data::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void player_item_data::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void player_item_data::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void player_item_data::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 player_item_data::id() const {
  // @@protoc_insertion_point(field_get:proto.db.player_item_data.id)
  return id_;
}
void player_item_data::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.db.player_item_data.id)
}

// required uint32 count = 2;
bool player_item_data::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void player_item_data::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
void player_item_data::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void player_item_data::clear_count() {
  count_ = 0u;
  clear_has_count();
}
::google::protobuf::uint32 player_item_data::count() const {
  // @@protoc_insertion_point(field_get:proto.db.player_item_data.count)
  return count_;
}
void player_item_data::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:proto.db.player_item_data.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int player_item_data_wrap::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

player_item_data_wrap::player_item_data_wrap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_player_5fitem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.db.player_item_data_wrap)
}
player_item_data_wrap::player_item_data_wrap(const player_item_data_wrap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_(from.data_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.db.player_item_data_wrap)
}

void player_item_data_wrap::SharedCtor() {
  _cached_size_ = 0;
}

player_item_data_wrap::~player_item_data_wrap() {
  // @@protoc_insertion_point(destructor:proto.db.player_item_data_wrap)
  SharedDtor();
}

void player_item_data_wrap::SharedDtor() {
}

void player_item_data_wrap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_item_data_wrap::descriptor() {
  protobuf_player_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_5fitem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const player_item_data_wrap& player_item_data_wrap::default_instance() {
  protobuf_player_5fitem_2eproto::InitDefaults();
  return *internal_default_instance();
}

player_item_data_wrap* player_item_data_wrap::New(::google::protobuf::Arena* arena) const {
  player_item_data_wrap* n = new player_item_data_wrap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void player_item_data_wrap::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.db.player_item_data_wrap)
  data_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool player_item_data_wrap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.db.player_item_data_wrap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.db.player_item_data data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.db.player_item_data_wrap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.db.player_item_data_wrap)
  return false;
#undef DO_
}

void player_item_data_wrap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.db.player_item_data_wrap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.db.player_item_data data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.db.player_item_data_wrap)
}

::google::protobuf::uint8* player_item_data_wrap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.db.player_item_data_wrap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.db.player_item_data data = 1;
  for (unsigned int i = 0, n = this->data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.db.player_item_data_wrap)
  return target;
}

size_t player_item_data_wrap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.db.player_item_data_wrap)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.db.player_item_data data = 1;
  {
    unsigned int count = this->data_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_item_data_wrap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.db.player_item_data_wrap)
  GOOGLE_DCHECK_NE(&from, this);
  const player_item_data_wrap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const player_item_data_wrap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.db.player_item_data_wrap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.db.player_item_data_wrap)
    MergeFrom(*source);
  }
}

void player_item_data_wrap::MergeFrom(const player_item_data_wrap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.db.player_item_data_wrap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
}

void player_item_data_wrap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.db.player_item_data_wrap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_item_data_wrap::CopyFrom(const player_item_data_wrap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.db.player_item_data_wrap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_item_data_wrap::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->data())) return false;
  return true;
}

void player_item_data_wrap::Swap(player_item_data_wrap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void player_item_data_wrap::InternalSwap(player_item_data_wrap* other) {
  data_.InternalSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata player_item_data_wrap::GetMetadata() const {
  protobuf_player_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_5fitem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// player_item_data_wrap

// repeated .proto.db.player_item_data data = 1;
int player_item_data_wrap::data_size() const {
  return data_.size();
}
void player_item_data_wrap::clear_data() {
  data_.Clear();
}
const ::proto::db::player_item_data& player_item_data_wrap::data(int index) const {
  // @@protoc_insertion_point(field_get:proto.db.player_item_data_wrap.data)
  return data_.Get(index);
}
::proto::db::player_item_data* player_item_data_wrap::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:proto.db.player_item_data_wrap.data)
  return data_.Mutable(index);
}
::proto::db::player_item_data* player_item_data_wrap::add_data() {
  // @@protoc_insertion_point(field_add:proto.db.player_item_data_wrap.data)
  return data_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::db::player_item_data >*
player_item_data_wrap::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:proto.db.player_item_data_wrap.data)
  return &data_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::db::player_item_data >&
player_item_data_wrap::data() const {
  // @@protoc_insertion_point(field_list:proto.db.player_item_data_wrap.data)
  return data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int player_item::kPlayerIdFieldNumber;
const int player_item::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

player_item::player_item()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_player_5fitem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.db.player_item)
}
player_item::player_item(const player_item& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_data()) {
    data_ = new ::proto::db::player_item_data_wrap(*from.data_);
  } else {
    data_ = NULL;
  }
  player_id_ = from.player_id_;
  // @@protoc_insertion_point(copy_constructor:proto.db.player_item)
}

void player_item::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&data_, 0, reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&data_) + sizeof(player_id_));
}

player_item::~player_item() {
  // @@protoc_insertion_point(destructor:proto.db.player_item)
  SharedDtor();
}

void player_item::SharedDtor() {
  if (this != internal_default_instance()) {
    delete data_;
  }
}

void player_item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_item::descriptor() {
  protobuf_player_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_5fitem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const player_item& player_item::default_instance() {
  protobuf_player_5fitem_2eproto::InitDefaults();
  return *internal_default_instance();
}

player_item* player_item::New(::google::protobuf::Arena* arena) const {
  player_item* n = new player_item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void player_item::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.db.player_item)
  if (has_data()) {
    GOOGLE_DCHECK(data_ != NULL);
    data_->::proto::db::player_item_data_wrap::Clear();
  }
  player_id_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool player_item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.db.player_item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 player_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_player_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.db.player_item_data_wrap data = 2 [(.serialize_type) = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.db.player_item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.db.player_item)
  return false;
#undef DO_
}

void player_item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.db.player_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->player_id(), output);
  }

  // optional .proto.db.player_item_data_wrap data = 2 [(.serialize_type) = 1];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->data_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.db.player_item)
}

::google::protobuf::uint8* player_item::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.db.player_item)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 player_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->player_id(), target);
  }

  // optional .proto.db.player_item_data_wrap data = 2 [(.serialize_type) = 1];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->data_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.db.player_item)
  return target;
}

size_t player_item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.db.player_item)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint64 player_id = 1;
  if (has_player_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->player_id());
  }
  // optional .proto.db.player_item_data_wrap data = 2 [(.serialize_type) = 1];
  if (has_data()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->data_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_item::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.db.player_item)
  GOOGLE_DCHECK_NE(&from, this);
  const player_item* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const player_item>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.db.player_item)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.db.player_item)
    MergeFrom(*source);
  }
}

void player_item::MergeFrom(const player_item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.db.player_item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_data()->::proto::db::player_item_data_wrap::MergeFrom(from.data());
    }
    if (cached_has_bits & 0x00000002u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void player_item::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.db.player_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_item::CopyFrom(const player_item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.db.player_item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_data()) {
    if (!this->data_->IsInitialized()) return false;
  }
  return true;
}

void player_item::Swap(player_item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void player_item::InternalSwap(player_item* other) {
  std::swap(data_, other->data_);
  std::swap(player_id_, other->player_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata player_item::GetMetadata() const {
  protobuf_player_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_5fitem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// player_item

// required uint64 player_id = 1;
bool player_item::has_player_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void player_item::set_has_player_id() {
  _has_bits_[0] |= 0x00000002u;
}
void player_item::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void player_item::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
::google::protobuf::uint64 player_item::player_id() const {
  // @@protoc_insertion_point(field_get:proto.db.player_item.player_id)
  return player_id_;
}
void player_item::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.db.player_item.player_id)
}

// optional .proto.db.player_item_data_wrap data = 2 [(.serialize_type) = 1];
bool player_item::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void player_item::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
void player_item::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
void player_item::clear_data() {
  if (data_ != NULL) data_->::proto::db::player_item_data_wrap::Clear();
  clear_has_data();
}
const ::proto::db::player_item_data_wrap& player_item::data() const {
  // @@protoc_insertion_point(field_get:proto.db.player_item.data)
  return data_ != NULL ? *data_
                         : *::proto::db::player_item_data_wrap::internal_default_instance();
}
::proto::db::player_item_data_wrap* player_item::mutable_data() {
  set_has_data();
  if (data_ == NULL) {
    data_ = new ::proto::db::player_item_data_wrap;
  }
  // @@protoc_insertion_point(field_mutable:proto.db.player_item.data)
  return data_;
}
::proto::db::player_item_data_wrap* player_item::release_data() {
  // @@protoc_insertion_point(field_release:proto.db.player_item.data)
  clear_has_data();
  ::proto::db::player_item_data_wrap* temp = data_;
  data_ = NULL;
  return temp;
}
void player_item::set_allocated_data(::proto::db::player_item_data_wrap* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:proto.db.player_item.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int player_item_set::kItemSetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

player_item_set::player_item_set()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_player_5fitem_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.db.player_item_set)
}
player_item_set::player_item_set(const player_item_set& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      item_set_(from.item_set_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.db.player_item_set)
}

void player_item_set::SharedCtor() {
  _cached_size_ = 0;
}

player_item_set::~player_item_set() {
  // @@protoc_insertion_point(destructor:proto.db.player_item_set)
  SharedDtor();
}

void player_item_set::SharedDtor() {
}

void player_item_set::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* player_item_set::descriptor() {
  protobuf_player_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_5fitem_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const player_item_set& player_item_set::default_instance() {
  protobuf_player_5fitem_2eproto::InitDefaults();
  return *internal_default_instance();
}

player_item_set* player_item_set::New(::google::protobuf::Arena* arena) const {
  player_item_set* n = new player_item_set;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void player_item_set::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.db.player_item_set)
  item_set_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool player_item_set::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.db.player_item_set)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.db.player_item item_set = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.db.player_item_set)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.db.player_item_set)
  return false;
#undef DO_
}

void player_item_set::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.db.player_item_set)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.db.player_item item_set = 1;
  for (unsigned int i = 0, n = this->item_set_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_set(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.db.player_item_set)
}

::google::protobuf::uint8* player_item_set::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:proto.db.player_item_set)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.db.player_item item_set = 1;
  for (unsigned int i = 0, n = this->item_set_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->item_set(i), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.db.player_item_set)
  return target;
}

size_t player_item_set::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.db.player_item_set)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .proto.db.player_item item_set = 1;
  {
    unsigned int count = this->item_set_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_set(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void player_item_set::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.db.player_item_set)
  GOOGLE_DCHECK_NE(&from, this);
  const player_item_set* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const player_item_set>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.db.player_item_set)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.db.player_item_set)
    MergeFrom(*source);
  }
}

void player_item_set::MergeFrom(const player_item_set& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.db.player_item_set)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_set_.MergeFrom(from.item_set_);
}

void player_item_set::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.db.player_item_set)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void player_item_set::CopyFrom(const player_item_set& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.db.player_item_set)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool player_item_set::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->item_set())) return false;
  return true;
}

void player_item_set::Swap(player_item_set* other) {
  if (other == this) return;
  InternalSwap(other);
}
void player_item_set::InternalSwap(player_item_set* other) {
  item_set_.InternalSwap(&other->item_set_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata player_item_set::GetMetadata() const {
  protobuf_player_5fitem_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_player_5fitem_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// player_item_set

// repeated .proto.db.player_item item_set = 1;
int player_item_set::item_set_size() const {
  return item_set_.size();
}
void player_item_set::clear_item_set() {
  item_set_.Clear();
}
const ::proto::db::player_item& player_item_set::item_set(int index) const {
  // @@protoc_insertion_point(field_get:proto.db.player_item_set.item_set)
  return item_set_.Get(index);
}
::proto::db::player_item* player_item_set::mutable_item_set(int index) {
  // @@protoc_insertion_point(field_mutable:proto.db.player_item_set.item_set)
  return item_set_.Mutable(index);
}
::proto::db::player_item* player_item_set::add_item_set() {
  // @@protoc_insertion_point(field_add:proto.db.player_item_set.item_set)
  return item_set_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::db::player_item >*
player_item_set::mutable_item_set() {
  // @@protoc_insertion_point(field_mutable_list:proto.db.player_item_set.item_set)
  return &item_set_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::db::player_item >&
player_item_set::item_set() const {
  // @@protoc_insertion_point(field_list:proto.db.player_item_set.item_set)
  return item_set_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace db
}  // namespace proto

// @@protoc_insertion_point(global_scope)
