// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player_base.proto

#ifndef PROTOBUF_player_5fbase_2eproto__INCLUDED
#define PROTOBUF_player_5fbase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003002 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "db_option.pb.h"
// @@protoc_insertion_point(includes)
namespace proto {
namespace db {
class player_base;
class player_baseDefaultTypeInternal;
extern player_baseDefaultTypeInternal _player_base_default_instance_;
class player_base_set;
class player_base_setDefaultTypeInternal;
extern player_base_setDefaultTypeInternal _player_base_set_default_instance_;
}  // namespace db
}  // namespace proto

namespace proto {
namespace db {

namespace protobuf_player_5fbase_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_player_5fbase_2eproto

// ===================================================================

class player_base : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.db.player_base) */ {
 public:
  player_base();
  virtual ~player_base();

  player_base(const player_base& from);

  inline player_base& operator=(const player_base& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_base& default_instance();

  static inline const player_base* internal_default_instance() {
    return reinterpret_cast<const player_base*>(
               &_player_base_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(player_base* other);

  // implements Message ----------------------------------------------

  inline player_base* New() const PROTOBUF_FINAL { return New(NULL); }

  player_base* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const player_base& from);
  void MergeFrom(const player_base& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(player_base* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string account_name = 2;
  bool has_account_name() const;
  void clear_account_name();
  static const int kAccountNameFieldNumber = 2;
  const ::std::string& account_name() const;
  void set_account_name(const ::std::string& value);
  #if LANG_CXX11
  void set_account_name(::std::string&& value);
  #endif
  void set_account_name(const char* value);
  void set_account_name(const char* value, size_t size);
  ::std::string* mutable_account_name();
  ::std::string* release_account_name();
  void set_allocated_account_name(::std::string* account_name);

  // optional string name = 6;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required uint64 player_id = 1;
  bool has_player_id() const;
  void clear_player_id();
  static const int kPlayerIdFieldNumber = 1;
  ::google::protobuf::uint64 player_id() const;
  void set_player_id(::google::protobuf::uint64 value);

  // optional uint64 last_login_time = 4;
  bool has_last_login_time() const;
  void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 4;
  ::google::protobuf::uint64 last_login_time() const;
  void set_last_login_time(::google::protobuf::uint64 value);

  // optional uint64 last_logout_time = 5;
  bool has_last_logout_time() const;
  void clear_last_logout_time();
  static const int kLastLogoutTimeFieldNumber = 5;
  ::google::protobuf::uint64 last_logout_time() const;
  void set_last_logout_time(::google::protobuf::uint64 value);

  // optional uint32 server_id = 3;
  bool has_server_id() const;
  void clear_server_id();
  static const int kServerIdFieldNumber = 3;
  ::google::protobuf::uint32 server_id() const;
  void set_server_id(::google::protobuf::uint32 value);

  // optional uint32 lv = 7;
  bool has_lv() const;
  void clear_lv();
  static const int kLvFieldNumber = 7;
  ::google::protobuf::uint32 lv() const;
  void set_lv(::google::protobuf::uint32 value);

  // optional uint64 exp = 8;
  bool has_exp() const;
  void clear_exp();
  static const int kExpFieldNumber = 8;
  ::google::protobuf::uint64 exp() const;
  void set_exp(::google::protobuf::uint64 value);

  // optional uint64 gold = 9;
  bool has_gold() const;
  void clear_gold();
  static const int kGoldFieldNumber = 9;
  ::google::protobuf::uint64 gold() const;
  void set_gold(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.db.player_base)
 private:
  void set_has_player_id();
  void clear_has_player_id();
  void set_has_account_name();
  void clear_has_account_name();
  void set_has_server_id();
  void clear_has_server_id();
  void set_has_last_login_time();
  void clear_has_last_login_time();
  void set_has_last_logout_time();
  void clear_has_last_logout_time();
  void set_has_name();
  void clear_has_name();
  void set_has_lv();
  void clear_has_lv();
  void set_has_exp();
  void clear_has_exp();
  void set_has_gold();
  void clear_has_gold();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr account_name_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::uint64 player_id_;
  ::google::protobuf::uint64 last_login_time_;
  ::google::protobuf::uint64 last_logout_time_;
  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 lv_;
  ::google::protobuf::uint64 exp_;
  ::google::protobuf::uint64 gold_;
  friend struct protobuf_player_5fbase_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class player_base_set : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.db.player_base_set) */ {
 public:
  player_base_set();
  virtual ~player_base_set();

  player_base_set(const player_base_set& from);

  inline player_base_set& operator=(const player_base_set& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const player_base_set& default_instance();

  static inline const player_base_set* internal_default_instance() {
    return reinterpret_cast<const player_base_set*>(
               &_player_base_set_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(player_base_set* other);

  // implements Message ----------------------------------------------

  inline player_base_set* New() const PROTOBUF_FINAL { return New(NULL); }

  player_base_set* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const player_base_set& from);
  void MergeFrom(const player_base_set& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(player_base_set* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.db.player_base data_set = 1;
  int data_set_size() const;
  void clear_data_set();
  static const int kDataSetFieldNumber = 1;
  const ::proto::db::player_base& data_set(int index) const;
  ::proto::db::player_base* mutable_data_set(int index);
  ::proto::db::player_base* add_data_set();
  ::google::protobuf::RepeatedPtrField< ::proto::db::player_base >*
      mutable_data_set();
  const ::google::protobuf::RepeatedPtrField< ::proto::db::player_base >&
      data_set() const;

  // @@protoc_insertion_point(class_scope:proto.db.player_base_set)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::db::player_base > data_set_;
  friend struct protobuf_player_5fbase_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// player_base

// required uint64 player_id = 1;
inline bool player_base::has_player_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void player_base::set_has_player_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void player_base::clear_has_player_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void player_base::clear_player_id() {
  player_id_ = GOOGLE_ULONGLONG(0);
  clear_has_player_id();
}
inline ::google::protobuf::uint64 player_base::player_id() const {
  // @@protoc_insertion_point(field_get:proto.db.player_base.player_id)
  return player_id_;
}
inline void player_base::set_player_id(::google::protobuf::uint64 value) {
  set_has_player_id();
  player_id_ = value;
  // @@protoc_insertion_point(field_set:proto.db.player_base.player_id)
}

// optional string account_name = 2;
inline bool player_base::has_account_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void player_base::set_has_account_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void player_base::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void player_base::clear_account_name() {
  account_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_account_name();
}
inline const ::std::string& player_base::account_name() const {
  // @@protoc_insertion_point(field_get:proto.db.player_base.account_name)
  return account_name_.GetNoArena();
}
inline void player_base::set_account_name(const ::std::string& value) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.db.player_base.account_name)
}
#if LANG_CXX11
inline void player_base::set_account_name(::std::string&& value) {
  set_has_account_name();
  account_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.db.player_base.account_name)
}
#endif
inline void player_base::set_account_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.db.player_base.account_name)
}
inline void player_base::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  account_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.db.player_base.account_name)
}
inline ::std::string* player_base::mutable_account_name() {
  set_has_account_name();
  // @@protoc_insertion_point(field_mutable:proto.db.player_base.account_name)
  return account_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* player_base::release_account_name() {
  // @@protoc_insertion_point(field_release:proto.db.player_base.account_name)
  clear_has_account_name();
  return account_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void player_base::set_allocated_account_name(::std::string* account_name) {
  if (account_name != NULL) {
    set_has_account_name();
  } else {
    clear_has_account_name();
  }
  account_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account_name);
  // @@protoc_insertion_point(field_set_allocated:proto.db.player_base.account_name)
}

// optional uint32 server_id = 3;
inline bool player_base::has_server_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void player_base::set_has_server_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void player_base::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void player_base::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 player_base::server_id() const {
  // @@protoc_insertion_point(field_get:proto.db.player_base.server_id)
  return server_id_;
}
inline void player_base::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
  // @@protoc_insertion_point(field_set:proto.db.player_base.server_id)
}

// optional uint64 last_login_time = 4;
inline bool player_base::has_last_login_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void player_base::set_has_last_login_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void player_base::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void player_base::clear_last_login_time() {
  last_login_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_login_time();
}
inline ::google::protobuf::uint64 player_base::last_login_time() const {
  // @@protoc_insertion_point(field_get:proto.db.player_base.last_login_time)
  return last_login_time_;
}
inline void player_base::set_last_login_time(::google::protobuf::uint64 value) {
  set_has_last_login_time();
  last_login_time_ = value;
  // @@protoc_insertion_point(field_set:proto.db.player_base.last_login_time)
}

// optional uint64 last_logout_time = 5;
inline bool player_base::has_last_logout_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void player_base::set_has_last_logout_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void player_base::clear_has_last_logout_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void player_base::clear_last_logout_time() {
  last_logout_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_logout_time();
}
inline ::google::protobuf::uint64 player_base::last_logout_time() const {
  // @@protoc_insertion_point(field_get:proto.db.player_base.last_logout_time)
  return last_logout_time_;
}
inline void player_base::set_last_logout_time(::google::protobuf::uint64 value) {
  set_has_last_logout_time();
  last_logout_time_ = value;
  // @@protoc_insertion_point(field_set:proto.db.player_base.last_logout_time)
}

// optional string name = 6;
inline bool player_base::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void player_base::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void player_base::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void player_base::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& player_base::name() const {
  // @@protoc_insertion_point(field_get:proto.db.player_base.name)
  return name_.GetNoArena();
}
inline void player_base::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.db.player_base.name)
}
#if LANG_CXX11
inline void player_base::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.db.player_base.name)
}
#endif
inline void player_base::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.db.player_base.name)
}
inline void player_base::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.db.player_base.name)
}
inline ::std::string* player_base::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:proto.db.player_base.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* player_base::release_name() {
  // @@protoc_insertion_point(field_release:proto.db.player_base.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void player_base::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.db.player_base.name)
}

// optional uint32 lv = 7;
inline bool player_base::has_lv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void player_base::set_has_lv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void player_base::clear_has_lv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void player_base::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 player_base::lv() const {
  // @@protoc_insertion_point(field_get:proto.db.player_base.lv)
  return lv_;
}
inline void player_base::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
  // @@protoc_insertion_point(field_set:proto.db.player_base.lv)
}

// optional uint64 exp = 8;
inline bool player_base::has_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void player_base::set_has_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void player_base::clear_has_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void player_base::clear_exp() {
  exp_ = GOOGLE_ULONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::uint64 player_base::exp() const {
  // @@protoc_insertion_point(field_get:proto.db.player_base.exp)
  return exp_;
}
inline void player_base::set_exp(::google::protobuf::uint64 value) {
  set_has_exp();
  exp_ = value;
  // @@protoc_insertion_point(field_set:proto.db.player_base.exp)
}

// optional uint64 gold = 9;
inline bool player_base::has_gold() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void player_base::set_has_gold() {
  _has_bits_[0] |= 0x00000100u;
}
inline void player_base::clear_has_gold() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void player_base::clear_gold() {
  gold_ = GOOGLE_ULONGLONG(0);
  clear_has_gold();
}
inline ::google::protobuf::uint64 player_base::gold() const {
  // @@protoc_insertion_point(field_get:proto.db.player_base.gold)
  return gold_;
}
inline void player_base::set_gold(::google::protobuf::uint64 value) {
  set_has_gold();
  gold_ = value;
  // @@protoc_insertion_point(field_set:proto.db.player_base.gold)
}

// -------------------------------------------------------------------

// player_base_set

// repeated .proto.db.player_base data_set = 1;
inline int player_base_set::data_set_size() const {
  return data_set_.size();
}
inline void player_base_set::clear_data_set() {
  data_set_.Clear();
}
inline const ::proto::db::player_base& player_base_set::data_set(int index) const {
  // @@protoc_insertion_point(field_get:proto.db.player_base_set.data_set)
  return data_set_.Get(index);
}
inline ::proto::db::player_base* player_base_set::mutable_data_set(int index) {
  // @@protoc_insertion_point(field_mutable:proto.db.player_base_set.data_set)
  return data_set_.Mutable(index);
}
inline ::proto::db::player_base* player_base_set::add_data_set() {
  // @@protoc_insertion_point(field_add:proto.db.player_base_set.data_set)
  return data_set_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::db::player_base >*
player_base_set::mutable_data_set() {
  // @@protoc_insertion_point(field_mutable_list:proto.db.player_base_set.data_set)
  return &data_set_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::db::player_base >&
player_base_set::data_set() const {
  // @@protoc_insertion_point(field_list:proto.db.player_base_set.data_set)
  return data_set_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace db
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_player_5fbase_2eproto__INCLUDED
